"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è Telegram –±–æ—Ç–∞
"""

import os
import logging
from datetime import datetime, timedelta
from typing import Dict
from telegram import Update
from telegram.ext import ContextTypes

from statistics import StatisticsManager

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã –∏–∑ main.py
try:
    from main import ADMIN_CHAT_ID, ADMIN_IDS
except ImportError:
    # –ï—Å–ª–∏ –∏–º–ø–æ—Ä—Ç –Ω–µ —É–¥–∞–ª—Å—è, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    ADMIN_CHAT_ID = "-4742593122"
    ADMIN_IDS = [550680968]

logger = logging.getLogger(__name__)


class StatsHandler:
    """–ö–ª–∞—Å—Å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
    
    def __init__(self, stats_manager: StatisticsManager, devices: Dict):
        self.stats_manager = stats_manager
        self.devices = devices
    
    def format_stats_message(self, stats: Dict) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π"""
        message = f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ SecondBot –∑–∞ {stats['date']}</b>\n\n"
        
        # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        message += f"üë• <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:</b>\n"
        message += f"‚Ä¢ –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats['total_users']}\n"
        message += f"‚Ä¢ –ù–æ–≤—ã—Ö –∑–∞ –¥–µ–Ω—å: {stats['new_users']}\n"
        message += f"‚Ä¢ –í—Å–µ–≥–æ –¥–µ–π—Å—Ç–≤–∏–π: {stats['total_actions']}\n\n"
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –Ω–æ–º–µ—Ä–∞–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤
        if stats['device_stats']:
            message += f"üîß <b>–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –Ω–æ–º–µ—Ä–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤:</b>\n"
            for number, count in stats['device_stats'].items():
                message += f"‚Ä¢ {number}: {count}\n"
            message += "\n"
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –≤–æ–ø—Ä–æ—Å–∞–º
        if stats['question_stats']:
            message += f"‚ùì <b>–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã:</b>\n"
            for question, count in list(stats['question_stats'].items())[:5]:
                message += f"‚Ä¢ {question}: {count}\n"
            message += "\n"
        
        # –¢–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        if stats['top_users']:
            message += f"‚≠ê <b>–ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:</b>\n"
            for user_id, username, first_name, action_count in stats['top_users']:
                display_name = username or first_name or f"ID{user_id}"
                message += f"‚Ä¢ {display_name}: {action_count} –¥–µ–π—Å—Ç–≤–∏–π\n"
        
        return message
    
    async def send_daily_stats(self, context: ContextTypes.DEFAULT_TYPE):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤ –∞–¥–º–∏–Ω—Å–∫–∏–π —á–∞—Ç"""
        if not ADMIN_CHAT_ID:
            logger.warning("ADMIN_CHAT_ID –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω, —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–µ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞")
            return
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ –≤—á–µ—Ä–∞—à–Ω–∏–π –¥–µ–Ω—å
            yesterday = (datetime.now() - timedelta(days=1)).strftime('%Y-%m-%d')
            stats = self.stats_manager.get_daily_stats(yesterday)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            self.stats_manager.save_daily_stats(yesterday, stats)
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            message = self.format_stats_message(stats)
            
            await context.bot.send_message(
                chat_id=ADMIN_CHAT_ID,
                text=message,
                parse_mode='HTML'
            )
            
            logger.info(f"–ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ –∞–¥–º–∏–Ω—Å–∫–∏–π —á–∞—Ç –∑–∞ {yesterday}")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
    
    async def stats_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        if not update.message:
            return
        
        user_id = update.message.from_user.id
        chat_id = update.message.chat_id
        chat_type = update.message.chat.type
        
        # –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        logger.info(f"–ö–æ–º–∞–Ω–¥–∞ /statsb2 –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –≤ —á–∞—Ç–µ {chat_id} (—Ç–∏–ø: {chat_type})")
        logger.info(f"ADMIN_CHAT_ID: {ADMIN_CHAT_ID}")
        logger.info(f"ADMIN_IDS: {ADMIN_IDS}")
        
        # –í—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –ø—Ä–∞–≤ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        # if user_id not in ADMIN_IDS and str(user_id) != ADMIN_CHAT_ID:
        #     await update.message.reply_text(f"‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏\n–í–∞—à ID: {user_id}\n–û–∂–∏–¥–∞–µ–º—ã–µ ID: {ADMIN_IDS}\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã:\n‚Ä¢ /statsb2 - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –¥–µ–Ω—å\n‚Ä¢ /mystatsb2 - –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n‚Ä¢ /weekstatsb2 - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –Ω–µ–¥–µ–ª—é\n‚Ä¢ /monthstatsb2 - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –º–µ—Å—è—Ü")
        #     return
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ —Å–µ–≥–æ–¥–Ω—è
            logger.info("–ü–æ–ª—É—á–∞–µ–º –µ–∂–µ–¥–Ω–µ–≤–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É...")
            today_stats = self.stats_manager.get_daily_stats()
            logger.info(f"–ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {today_stats}")
            
            # –ü–æ–ª—É—á–∞–µ–º –Ω–µ–¥–µ–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            logger.info("–ü–æ–ª—É—á–∞–µ–º –Ω–µ–¥–µ–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É...")
            weekly_stats = self.stats_manager.get_weekly_stats()
            logger.info(f"–ù–µ–¥–µ–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {weekly_stats}")
            
            message = self.format_stats_message(today_stats)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–¥–µ–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            message += f"\nüìà <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –Ω–µ–¥–µ–ª—é:</b>\n"
            message += f"‚Ä¢ –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {weekly_stats['unique_users']}\n"
            message += f"‚Ä¢ –í—Å–µ–≥–æ –¥–µ–π—Å—Ç–≤–∏–π: {weekly_stats['total_actions']}\n"
            
            if weekly_stats['daily_actions']:
                message += f"\nüìÖ <b>–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ –¥–Ω—è–º:</b>\n"
                for date, actions in weekly_stats['daily_actions'].items():
                    message += f"‚Ä¢ {date}: {actions} –¥–µ–π—Å—Ç–≤–∏–π\n"
            
            logger.info(f"–û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ: {message}")
            await update.message.reply_text(message, parse_mode='HTML')
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}", exc_info=True)
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {str(e)}")
    
    async def user_stats_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        if not update.message:
            return
        
        user_id = update.message.from_user.id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
        # –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø—ã—Ç–∞–µ—Ç—Å—è –ø–æ–ª—É—á–∏—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É")
        logger.info(f"ADMIN_CHAT_ID: {ADMIN_CHAT_ID}")
        logger.info(f"ADMIN_IDS: {ADMIN_IDS}")
        
        # –í—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –ø—Ä–∞–≤ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        # if user_id not in ADMIN_IDS and str(user_id) != ADMIN_CHAT_ID:
        #     await update.message.reply_text(f"‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏\n–í–∞—à ID: {user_id}\n–û–∂–∏–¥–∞–µ–º—ã–µ ID: {ADMIN_IDS}\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã:\n‚Ä¢ /statsb2 - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –¥–µ–Ω—å\n‚Ä¢ /mystatsb2 - –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n‚Ä¢ /weekstatsb2 - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –Ω–µ–¥–µ–ª—é\n‚Ä¢ /monthstatsb2 - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –º–µ—Å—è—Ü")
        #     return
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_stats = self.stats_manager.get_user_stats(user_id)
            
            if not user_stats:
                await update.message.reply_text("‚ùå –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                return
            
            message = f"üë§ <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</b>\n\n"
            
            user_info = user_stats['user_info']
            message += f"<b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:</b>\n"
            message += f"‚Ä¢ Username: @{user_info['username'] or '–Ω–µ —É–∫–∞–∑–∞–Ω'}\n"
            message += f"‚Ä¢ –ò–º—è: {user_info['first_name'] or '–Ω–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
            message += f"‚Ä¢ –§–∞–º–∏–ª–∏—è: {user_info['last_name'] or '–Ω–µ —É–∫–∞–∑–∞–Ω–∞'}\n"
            message += f"‚Ä¢ –ü–µ—Ä–≤—ã–π –≤–∏–∑–∏—Ç: {user_info['first_seen']}\n"
            message += f"‚Ä¢ –ü–æ—Å–ª–µ–¥–Ω–∏–π –≤–∏–∑–∏—Ç: {user_info['last_seen']}\n"
            message += f"‚Ä¢ –í—Å–µ–≥–æ –¥–µ–π—Å—Ç–≤–∏–π: {user_stats['total_actions']}\n\n"
            
            if user_stats['device_stats']:
                message += f"<b>–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –Ω–æ–º–µ—Ä–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤:</b>\n"
                for number, count in user_stats['device_stats'].items():
                    message += f"‚Ä¢ {number}: {count}\n"
                message += "\n"
            
            if user_stats['recent_actions']:
                message += f"<b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è:</b>\n"
                for action in user_stats['recent_actions'][:5]:
                    action_type, device_type, model, number, question, timestamp = action
                    action_text = f"{action_type}"
                    if device_type:
                        action_text += f" ({device_type}"
                        if model:
                            action_text += f" {model}"
                        if number:
                            action_text += f" {number}"
                        action_text += ")"
                    message += f"‚Ä¢ {action_text}: {timestamp}\n"
            
            await update.message.reply_text(message, parse_mode='HTML')
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
    
    async def weekly_stats_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–µ–¥–µ–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        try:
            user_id = update.message.from_user.id
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
            if user_id not in ADMIN_IDS and str(user_id) != ADMIN_CHAT_ID:
                await update.message.reply_text(f"‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏\n–í–∞—à ID: {user_id}\n–û–∂–∏–¥–∞–µ–º—ã–µ ID: {ADMIN_IDS}\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã:\n‚Ä¢ /statsb2 - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –¥–µ–Ω—å\n‚Ä¢ /mystatsb2 - –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n‚Ä¢ /weekstatsb2 - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –Ω–µ–¥–µ–ª—é\n‚Ä¢ /monthstatsb2 - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –º–µ—Å—è—Ü")
                return
            
            # –ü–æ–ª—É—á–∞–µ–º –Ω–µ–¥–µ–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            weekly_stats = self.stats_manager.get_weekly_stats()
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            message = f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ SecondBot –∑–∞ –Ω–µ–¥–µ–ª—é</b>\n\n"
            message += f"üë• <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:</b>\n"
            message += f"‚Ä¢ –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {weekly_stats['unique_users']}\n"
            message += f"‚Ä¢ –í—Å–µ–≥–æ –¥–µ–π—Å—Ç–≤–∏–π: {weekly_stats['total_actions']}\n\n"
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –¥–Ω—è–º
            if weekly_stats['daily_actions']:
                message += f"üìÖ <b>–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ –¥–Ω—è–º:</b>\n"
                for date, actions in weekly_stats['daily_actions'].items():
                    message += f"‚Ä¢ {date}: {actions} –¥–µ–π—Å—Ç–≤–∏–π\n"
                message += "\n"
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –Ω–æ–º–µ—Ä–∞–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤
            if weekly_stats['device_stats']:
                message += f"üîß <b>–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –Ω–æ–º–µ—Ä–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤:</b>\n"
                for number, count in weekly_stats['device_stats'].items():
                    message += f"‚Ä¢ {number}: {count}\n"
                message += "\n"
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –≤–æ–ø—Ä–æ—Å–∞–º
            if weekly_stats['question_stats']:
                message += f"‚ùì <b>–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã:</b>\n"
                for question, count in list(weekly_stats['question_stats'].items())[:5]:
                    message += f"‚Ä¢ {question}: {count}\n"
                message += "\n"
            
            # –¢–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
            if weekly_stats['top_users']:
                message += f"‚≠ê <b>–¢–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:</b>\n"
                for user_id, username, first_name, action_count in weekly_stats['top_users']:
                    display_name = username or first_name or f"ID{user_id}"
                    message += f"‚Ä¢ {display_name}: {action_count} –¥–µ–π—Å—Ç–≤–∏–π\n"
                message += "\n"
            
            await update.message.reply_text(message, parse_mode='HTML')
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–µ–¥–µ–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–µ–¥–µ–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")
    
    async def monthly_stats_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –º–µ—Å—è—á–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        try:
            user_id = update.message.from_user.id
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
            if user_id not in ADMIN_IDS and str(user_id) != ADMIN_CHAT_ID:
                await update.message.reply_text(f"‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏\n–í–∞—à ID: {user_id}\n–û–∂–∏–¥–∞–µ–º—ã–µ ID: {ADMIN_IDS}\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã:\n‚Ä¢ /statsb2 - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –¥–µ–Ω—å\n‚Ä¢ /mystatsb2 - –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n‚Ä¢ /weekstatsb2 - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –Ω–µ–¥–µ–ª—é\n‚Ä¢ /monthstatsb2 - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –º–µ—Å—è—Ü")
                return
            
            # –ü–æ–ª—É—á–∞–µ–º –º–µ—Å—è—á–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            monthly_stats = self.stats_manager.get_monthly_stats()
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            message = f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ SecondBot –∑–∞ –º–µ—Å—è—Ü</b>\n\n"
            message += f"üë• <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:</b>\n"
            message += f"‚Ä¢ –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {monthly_stats['unique_users']}\n"
            message += f"‚Ä¢ –í—Å–µ–≥–æ –¥–µ–π—Å—Ç–≤–∏–π: {monthly_stats['total_actions']}\n\n"
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –Ω–µ–¥–µ–ª—è–º
            if monthly_stats['weekly_actions']:
                message += f"üìÖ <b>–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ –Ω–µ–¥–µ–ª—è–º:</b>\n"
                for week, actions in monthly_stats['weekly_actions'].items():
                    message += f"‚Ä¢ –ù–µ–¥–µ–ª—è {week}: {actions} –¥–µ–π—Å—Ç–≤–∏–π\n"
                message += "\n"
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –¥–Ω—è–º (–ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π –¥–ª—è –∫—Ä–∞—Ç–∫–æ—Å—Ç–∏)
            if monthly_stats['daily_actions']:
                recent_days = dict(list(monthly_stats['daily_actions'].items())[-7:])
                message += f"üìÖ <b>–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ –¥–Ω—è–º (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π):</b>\n"
                for date, actions in recent_days.items():
                    message += f"‚Ä¢ {date}: {actions} –¥–µ–π—Å—Ç–≤–∏–π\n"
                message += "\n"
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –Ω–æ–º–µ—Ä–∞–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤
            if monthly_stats['device_stats']:
                message += f"üîß <b>–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –Ω–æ–º–µ—Ä–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤:</b>\n"
                for number, count in monthly_stats['device_stats'].items():
                    message += f"‚Ä¢ {number}: {count}\n"
                message += "\n"
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –≤–æ–ø—Ä–æ—Å–∞–º
            if monthly_stats['question_stats']:
                message += f"‚ùì <b>–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã:</b>\n"
                for question, count in list(monthly_stats['question_stats'].items())[:5]:
                    message += f"‚Ä¢ {question}: {count}\n"
                message += "\n"
            
            # –¢–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
            if monthly_stats['top_users']:
                message += f"‚≠ê <b>–¢–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:</b>\n"
                for user_id, username, first_name, action_count in monthly_stats['top_users']:
                    display_name = username or first_name or f"ID{user_id}"
                    message += f"‚Ä¢ {display_name}: {action_count} –¥–µ–π—Å—Ç–≤–∏–π\n"
                message += "\n"
            
            await update.message.reply_text(message, parse_mode='HTML')
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –º–µ—Å—è—á–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –º–µ—Å—è—á–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")
